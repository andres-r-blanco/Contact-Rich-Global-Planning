import numpy as np
from scipy.spatial.transform import Rotation as R
import pprint

def quaternion_to_rpy_corrected(quaternion):
    q_x, q_y, q_z, q_w = quaternion
    roll = np.arctan2(2 * (q_w * q_x + q_y * q_z), 1 - 2 * (q_x**2 + q_y**2))
    pitch = np.arcsin(2 * (q_w * q_y - q_z * q_x))
    yaw = np.arctan2(2 * (q_w * q_z + q_x * q_y), 1 - 2 * (q_y**2 + q_z**2))
    return [roll, pitch, yaw] 
    
def quaternion_to_rotation_matrix(quat):
    """
    Convert a quaternion into a 3x3 rotation matrix.
    Input: quat - a 4-element iterable (x, y, z, w)
    Output: 3x3 numpy array (rotation matrix)
    """
    x, y, z, w = quat

    # Normalize the quaternion to be safe
    norm = np.sqrt(x*x + y*y + z*z + w*w)
    x /= norm
    y /= norm
    z /= norm
    w /= norm

    R = [
        [1 - 2*y*y - 2*z*z,     2*x*y - 2*z*w,       2*x*z + 2*y*w],
        [2*x*y + 2*z*w,         1 - 2*x*x - 2*z*z,   2*y*z - 2*x*w],
        [2*x*z - 2*y*w,         2*y*z + 2*x*w,       1 - 2*x*x - 2*y*y]
    ]
    return R

def quaternion_to_normal_vector(quat, up_vector=np.array([0, 0, 1])):
    """
    Rotate the default 'up' vector using the given quaternion to get the normal vector.
    Input:
        quat - a 4-element iterable (x, y, z, w)
        up_vector - the vector to rotate (default is [0, 0, 1])
    Output:
        normal - rotated normal vector (3-element numpy array)
    """
    R = quaternion_to_rotation_matrix(quat)
    normal = R @ up_vector
    return normal

    
    return [roll, pitch, yaw]
def print_taxel_URDF(tax_num, tax_xyzrpy_array,rotation_addition_list,parent_link):
    contact_rpy = tax_xyzrpy_array[3:6]
    rpy2 = rotation_addition_list
    contact_rot = R.from_euler('xyz', contact_rpy)  # 'xyz' denotes RPY order
    
    taxel_contact_distances = [0.01,0.02,0.01,0.02,0.01,0.02,0.02,0.01,0.02,0.02,0.01,0.01,0.01,0.01,0.02,0.02,0.01,0.01,0.01,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0.01]
    local_direction = np.array([1, 0, 0])
    world_direction = contact_rot.apply(local_direction)
    d=taxel_contact_distances[tax_num]
    contact_xyz = tax_xyzrpy_array[0:3] + d*world_direction
    
    rot2 = R.from_euler('xyz', rpy2)
    combined_rotation = contact_rot * rot2
    tax_xyzrpy_array[3:6] = combined_rotation.as_euler('xyz')
    # tax_xyzrpy_array[3] = tax_xyzrpy_array[3] + rotation_addition_list[0]
    # tax_xyzrpy_array[4] = tax_xyzrpy_array[4] + rotation_addition_list[1]
    # tax_xyzrpy_array[5] = tax_xyzrpy_array[5] + rotation_addition_list[2]
    tax_xyzrpy_array[3:6] = [(angle + np.pi) % (2 * np.pi) - np.pi for angle in tax_xyzrpy_array[3:6]]
    rpy_string = str(tax_xyzrpy_array[3]) + " " + str(tax_xyzrpy_array[4]) + " " + str(tax_xyzrpy_array[5])
    contact_rpy_string = str(contact_rpy[0]) + " " + str(contact_rpy[1]) + " " + str(contact_rpy[2])
    xyz_string = str(tax_xyzrpy_array[0]) + " " + str(tax_xyzrpy_array[1]) + " " + str(tax_xyzrpy_array[2])
    contact_xyz_string = str(contact_xyz[0]) + " " + str(contact_xyz[1]) + " " + str(contact_xyz[2])
    if tax_num < 10:
        zero_tax_num = "0" + str(tax_num)
    else:
        zero_tax_num = str(tax_num)
    xml_content = f'''
    <link name="Taxel_10{zero_tax_num}">
        <inertial>
            <origin xyz="{xyz_string}" rpy="{rpy_string}" />
            <mass value="0" />
            <inertia ixx="0" ixy="0" ixz="0" iyy="0" iyz="0" izz="0" />
        </inertial>
        <visual>
            <origin xyz="{xyz_string}" rpy="{rpy_string}" />
            <geometry>
                <mesh filename="package://meshes/taxel_meshes/taxel {tax_num}.STL" scale="0.01 0.01 0.01"/>
            </geometry>
            <material name="carbon_fiber" />
        </visual>
        <collision>
            <origin xyz="{xyz_string}" rpy="{rpy_string}" />
            <geometry>
                <mesh filename="package://meshes/taxel_meshes/taxel {tax_num}.STL" scale="0.01 0.01 0.01"/>
            </geometry>
        </collision>
    </link>

    <joint name="Taxel_10{zero_tax_num}_joint" type="fixed">
        <origin xyz="{contact_xyz_string}" rpy="{contact_rpy_string}" />
        <parent link="{parent_link}" />
        <child link="Taxel_10{zero_tax_num}" />
        <axis xyz="0 0 0" />
    </joint>
    '''


    # Split the string by newlines and print each line
    # for line in xml_content.splitlines():
    #     print(line)
    print(xml_content)
    return xml_content


def run_through_set(tax_num, parent_link,tax_set,rotation_addition_list):
    for i, list in enumerate(tax_set):
        quaternion = [list[3], list[4],list[5],list[6]]
        rpy = quaternion_to_rpy_corrected(quaternion)
        tax_xyzrpy_array = list[0:3] + rpy
        text = print_taxel_URDF(tax_num, tax_xyzrpy_array,rotation_addition_list[tax_num],parent_link)
        tax_num = tax_num + 1
    return tax_num, text

rotation_addition_list = [[np.pi/2, np.pi/2,0], [0,0,0], [np.pi/2,np.pi/2,0], 
                          [0,0,0], [np.pi/2,np.pi/2,0], [0,0,np.pi], [np.pi/2,np.pi/2,0], 
                          [0,0,0], [np.pi/2,0,0], [0,np.pi/2,np.pi], 
                          [0,0,0], [np.pi,0,0], [0,0,0], 
                          [0,0,0], [-np.pi/2, -np.pi/2,np.pi], [-np.pi/2,-np.pi/2,0], 
                          [0,0,0], [0,0,0], [-np.pi/2,-np.pi/2,0], 
                          [np.pi/2,0,0], [np.pi/2,0,0], [np.pi,-np.pi,0], 
                          [0,0,0], [0,0,0], 
                          [np.pi/2,np.pi/2,0], [np.pi/2,np.pi/2,np.pi], [0,0,0], [0,0,0]]
for i in range(20):
    print("")

input_path = r"/home/rishabh/Andres/Manip planning/mp-osc/multipriority/urdfs/GEN3_URDF_V12_w_taxels.urdf"
output_path = r"/home/rishabh/Andres/Manip planning/mp-osc/multipriority/urdfs/GEN3_URDF_V12_w_taxels2.urdf"

urdf_file = input_path
# print("")
# full_taxel_set = [[-0.04250419541867655, -0.07646850041798192, 0.0007855905951708805, 0.05396819817477865, 0.9970517495619106, 0.05423614308795641, 0.005803711247523552], [-1.4938605298674768e-05, -0.040050790502569544, -0.051076626480111506, 0.5000365005254409, 0.34394529531169066, -0.4999814390835631, 0.6178055459019086], [0.04271566985884755, -0.07873195857060433, -0.00022802633048775445, 0.05433392281371004, 0.00584107302674998, 0.053934165055849075, 0.9970480492620699], [-1.241750836219415e-05, -0.07730975191366674, 0.0431837840229755, 0.47216117759357906, 0.49998266763609955, 0.5263874219510004, -0.4999974364421432], [0.043150247276728726, -0.0001254639437208889, -0.02783098306648868, -0.6671809492023308, 0.03648814694975558, 0.03972059278641341, 0.7429404220140043], [-0.0002382337409993086, -0.05179760671765822, -0.06710984221647054, 0.7931583735470263, -0.5917771330108391, 0.11530857651730025, 0.08604389286441265], [-0.04318974980140639, -0.00010915210035311942, -0.02761946835919482, -0.03958059495218254, 0.7428666869183956, 0.667274794872719, 0.03642540456453173], [-1.1618120415300221e-05, 0.043922698718644126, -0.02686054939608018, 0.7191438184090839, 0.694644576511585, -0.012486233603918649, 0.012048847971181388],[0.047082560876994604, 0.016625508860321547, -0.046140884202656954, 0.9471991588463332, 0.1691378953518359, 0.05096053402959374, 0.2675988598783065], [-6.7198083501523495e-06, 0.05300935180393007, -0.04461977697709482, -0.1022916338690638, 0.0984336440316308, 0.6996625470491327, 0.7002282196682542], [-0.047097438974916264, 0.016627161287515402, -0.04613586787243025, 0.2021183185586086, 0.9406588744028735, 0.26585818319577653, 0.060236979821379856], [-7.590645030513553e-06, 0.006405133918228834, -0.06439226342932816, 0.5227678444474283, -0.5000205251012901, -0.476135773379193, -0.4999879804533488], [-8.828563007841432e-06, -0.08046080686920276, -0.059019306181966213, -0.49998440426292556, 0.5437829173089761, 0.5000063542769648, 0.45200595130976545], [-9.803819467654521e-06, -0.16267771019312338, -0.050246400171184896, -0.49998467919878753, 0.5256263349749253, 0.5000062701781689, 0.47299683543320914], [-0.04173526667542263, -0.15496948117011622, -0.005150262600599035, 0.046897282444560796, 0.9916783333134491, 0.09290860936541631, 0.0757807260572222], [0.04171973319335233, -0.15497094542273304, -0.005154707682772205, 0.9916781320610614, 0.046880718705154874, 0.075778579171644, 0.09292086710906065], [-5.302853516851408e-06, -0.15282581480448965, 0.031012491151505076, 0.5000072377234102, -0.28691403824118483, 0.49998259538130607, 0.6462897966083907], [-6.150508083981775e-06, -0.07701626534250128, -0.00987434420722404, 0.5000070455175415, -0.3180981756984605, 0.49998289672888646, 0.631524827721542],[0.04775940299230756, -0.029172408330763868, -0.2301544199406168, -0.7850820767242136, 0.23518999386731776, 0.22547873511465377, 0.5267742776580719], [-2.092488763690554e-06, -0.02694220419582137, -0.2644489118296661, -0.7053819259363223, 0.04930935191054303, 0.705389309972957, 0.049303628187010014], [-0.04713575005582718, -0.026383465676048472, -0.23055139832768035, -0.10306935274406294, 0.5629900514279733, 0.8055583615174258, 0.15327960303774446], [-1.2173507245044695e-06, -0.054580934607185494, -0.22775170878253925, 0.751307731005706, -0.6565271540612538, 0.05055865348607755, 0.04418836802783568], [-0.0001333060986898991, -0.05338028930573722, -0.1389517161450241, -0.6861879570978645, 0.7268540200870826, -0.01976516042454962, -0.020944198492622863], [-3.23855682768594e-05, -0.05187961469696644, -0.04785172827035311, 0.719248762615992, -0.6945333033911236, 0.012553135432175193, 0.012129581476701585], [-0.0500349226337144, -0.007382389594276225, -0.06305150607070498, -0.045736310476853885, 0.6613858783921874, 0.7475576660777266, 0.04042827792254505], [0.05086506074464583, -0.00737702635118296, -0.06455261415550584, -0.7528744790095572, 0.04574810117494517, 0.05266727421606542, 0.654456483138203], [0.0018625242094073681, 0.04412050179254166, -0.0457524543636606, -0.13492466600078198, 0.13492510223719884, 0.6941339684352255, 0.6940955158731575], [0.0008638901480674864, 0.004619954887956686, -0.11295215320413332, -0.16507394606822137, 0.1650727046122378, 0.6875879754333427, 0.6875495404412282]]
# taxel_contact_matrix = []
# for j, taxel_xyzquat in enumerate(full_taxel_set):
#     position = taxel_xyzquat[0:3]
#     quat = taxel_xyzquat[3:7]
#     normal = quaternion_to_normal_vector(quat)
#     d = 0
#     for i in range(len(position)):
#         position[i] = position[i] + d*normal[i]
#     # Compute RPY from the normal vector
#     rot1 = quaternion_to_rotation_matrix(quat)
    
#     rot1 = np.array(rot1)
#     rot2 = np.array([
#         [0, 0, 1],
#         [0, 1, 0],
#         [-1, 0, 0]
#     ])
#     rot_matrix = rot1 * rot2
#     rot_matrix = rot_matrix.tolist()
#     taxel_tuple = ([position[0], position[1], position[2]], rot_matrix)
#     taxel_contact_matrix.append(taxel_tuple)
# pprint.pprint(taxel_contact_matrix)


elements = []
tax_set = [[-0.04250419541867655, -0.07646850041798192, 0.0007855905951708805, 0.05396819817477865, 0.9970517495619106, 0.05423614308795641, 0.005803711247523552], [-1.4938605298674768e-05, -0.040050790502569544, -0.051076626480111506, 0.5000365005254409, 0.34394529531169066, -0.4999814390835631, 0.6178055459019086], [0.04271566985884755, -0.07873195857060433, -0.00022802633048775445, 0.05433392281371004, 0.00584107302674998, 0.053934165055849075, 0.9970480492620699], [-1.241750836219415e-05, -0.07730975191366674, 0.0431837840229755, 0.47216117759357906, 0.49998266763609955, 0.5263874219510004, -0.4999974364421432]]
tax_num = 0
parent_link = "SphericalWrist2_Link"
tax_num, text = run_through_set(tax_num, parent_link,tax_set,rotation_addition_list)
elements.append(text)
# tax_num = tax_num+4
tax_set = [[0.043150247276728726, -0.0001254639437208889, -0.02783098306648868, -0.6671809492023308, 0.03648814694975558, 0.03972059278641341, 0.7429404220140043], [-0.0002382337409993086, -0.05179760671765822, -0.06710984221647054, 0.7931583735470263, -0.5917771330108391, 0.11530857651730025, 0.08604389286441265], [-0.04318974980140639, -0.00010915210035311942, -0.02761946835919482, -0.03958059495218254, 0.7428666869183956, 0.667274794872719, 0.03642540456453173], [-1.1618120415300221e-05, 0.043922698718644126, -0.02686054939608018, 0.7191438184090839, 0.694644576511585, -0.012486233603918649, 0.012048847971181388]]
parent_link = "SphericalWrist1_Link"
tax_num, text  = run_through_set(tax_num, parent_link,tax_set,rotation_addition_list)
elements.append(text)
# tax_num = tax_num+4
tax_set = [[0.047082560876994604, 0.016625508860321547, -0.046140884202656954, 0.9471991588463332, 0.1691378953518359, 0.05096053402959374, 0.2675988598783065], [-6.7198083501523495e-06, 0.05300935180393007, -0.04461977697709482, -0.1022916338690638, 0.0984336440316308, 0.6996625470491327, 0.7002282196682542], [-0.047097438974916264, 0.016627161287515402, -0.04613586787243025, 0.2021183185586086, 0.9406588744028735, 0.26585818319577653, 0.060236979821379856], [-7.590645030513553e-06, 0.006405133918228834, -0.06439226342932816, 0.5227678444474283, -0.5000205251012901, -0.476135773379193, -0.4999879804533488], [-8.828563007841432e-06, -0.08046080686920276, -0.059019306181966213, -0.49998440426292556, 0.5437829173089761, 0.5000063542769648, 0.45200595130976545], [-9.803819467654521e-06, -0.16267771019312338, -0.050246400171184896, -0.49998467919878753, 0.5256263349749253, 0.5000062701781689, 0.47299683543320914], [-0.04173526667542263, -0.15496948117011622, -0.005150262600599035, 0.046897282444560796, 0.9916783333134491, 0.09290860936541631, 0.0757807260572222], [0.04171973319335233, -0.15497094542273304, -0.005154707682772205, 0.9916781320610614, 0.046880718705154874, 0.075778579171644, 0.09292086710906065], [-5.302853516851408e-06, -0.15282581480448965, 0.031012491151505076, 0.5000072377234102, -0.28691403824118483, 0.49998259538130607, 0.6462897966083907], [-6.150508083981775e-06, -0.07701626534250128, -0.00987434420722404, 0.5000070455175415, -0.3180981756984605, 0.49998289672888646, 0.631524827721542]]
parent_link = "ForeArm_Link"
tax_num, text  = run_through_set(tax_num, parent_link,tax_set,rotation_addition_list)
elements.append(text)

tax_set = [[0.04775940299230756, -0.029172408330763868, -0.2301544199406168, -0.7850820767242136, 0.23518999386731776, 0.22547873511465377, 0.5267742776580719], [-2.092488763690554e-06, -0.02694220419582137, -0.2644489118296661, -0.7053819259363223, 0.04930935191054303, 0.705389309972957, 0.049303628187010014], [-0.04713575005582718, -0.026383465676048472, -0.23055139832768035, -0.10306935274406294, 0.5629900514279733, 0.8055583615174258, 0.15327960303774446], [-1.2173507245044695e-06, -0.054580934607185494, -0.22775170878253925, 0.751307731005706, -0.6565271540612538, 0.05055865348607755, 0.04418836802783568], [-0.0001333060986898991, -0.05338028930573722, -0.1389517161450241, -0.6861879570978645, 0.7268540200870826, -0.01976516042454962, -0.020944198492622863], [-3.23855682768594e-05, -0.05187961469696644, -0.04785172827035311, 0.719248762615992, -0.6945333033911236, 0.012553135432175193, 0.012129581476701585], [-0.0500349226337144, -0.007382389594276225, -0.06305150607070498, -0.045736310476853885, 0.6613858783921874, 0.7475576660777266, 0.04042827792254505], [0.05086506074464583, -0.00737702635118296, -0.06455261415550584, -0.7528744790095572, 0.04574810117494517, 0.05266727421606542, 0.654456483138203], [0.0018625242094073681, 0.04412050179254166, -0.0457524543636606, -0.13492466600078198, 0.13492510223719884, 0.6941339684352255, 0.6940955158731575], [0.0008638901480674864, 0.004619954887956686, -0.11295215320413332, -0.16507394606822137, 0.1650727046122378, 0.6875879754333427, 0.6875495404412282]]
parent_link = "HalfArm2_Link"
tax_num, text  = run_through_set(tax_num, parent_link,tax_set,rotation_addition_list)
elements.append(text)

